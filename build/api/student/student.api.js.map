{"version":3,"sources":["../../../src/api/student/student.api.js"],"names":["createStudent","req","res","firstName","lastName","age","gender","scoreDetail","body","student","Student","result","save","error","console","log","getStudentList","limit","page","query","skip","students","total","Promise","all","find","isActive","count","message","options"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,MAAMA,wCAAgB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,QAAI;AACA,cAAM,EAAEC,SAAF,EAAaC,QAAb,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,WAApC,KAAoDN,IAAIO,IAA9D;AACA,cAAMC,UAAU,IAAIC,gBAAJ,CAAY,EAAEP,SAAF,EAAaC,QAAb,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,WAApC,EAAZ,CAAhB;AACA,cAAMI,SAAS,MAAMF,QAAQG,IAAR,EAArB;AACA,YAAID,MAAJ,EAAY,uBAAQT,GAAR,EAAaS,MAAb,EAAqB,GAArB,EAAZ,KACK,sBAAOT,GAAP,EAAY,0BAAZ,EAAwC,GAAxC;AACR,KAND,CAME,OAAOW,KAAP,EAAc;AACZC,gBAAQC,GAAR,CAAYF,KAAZ;AACA,8BAAOX,GAAP,EAAYW,KAAZ,EAAmB,GAAnB;AACH;AACJ,CAXM;;AAaA,MAAMG,0CAAiB,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,QAAI;AACA,YAAI,EAAEe,QAAQ,EAAV,EAAcC,OAAO,CAArB,KAA2BjB,IAAIkB,KAAnC;AACAF,gBAAQ,CAACA,KAAT;AACAC,eAAO,CAACA,IAAR;AACA,cAAME,OAAOH,SAASC,OAAO,CAAhB,CAAb;;AAEA,cAAM,CAACG,QAAD,EAAWC,KAAX,IAAoB,MAAMC,QAAQC,GAAR,CAAY,CACxCd,iBAAQe,IAAR,CAAa,EAAEC,UAAU,IAAZ,EAAb,EAAiCN,IAAjC,CAAsCA,IAAtC,EAA4CH,KAA5C,CAAkDA,KAAlD,CADwC,EAExCP,iBAAQiB,KAAR,CAAc,EAAED,UAAU,IAAZ,EAAd,CAFwC,CAAZ,CAAhC;;AAKA,YAAIL,QAAJ,EAAc;AACV,mCAAQnB,GAAR,EAAY,EAAC0B,SAAS,SAAV,EAAoB,QAAQP,QAA5B,EAAqCQ,SAAS,EAACZ,KAAD,EAAOG,IAAP,EAAYE,KAAZ,EAA9C,EAAZ,EAA+E,GAA/E;AACH,SAFD,MAGK,sBAAOpB,GAAP,EAAY,WAAZ,EAAyB,GAAzB;AACR,KAfD,CAeE,OAAOW,KAAP,EAAc;AACZC,gBAAQC,GAAR,CAAYF,KAAZ;AACA,8BAAOX,GAAP,EAAYW,KAAZ,EAAmB,GAAnB;AACH;AACJ,CApBM","file":"student.api.js","sourcesContent":["import { failed, succeed } from '../../common/response';\r\nimport { Student } from '../../models/student';\r\n\r\nexport const createStudent = async (req, res) => {\r\n    try {\r\n        const { firstName, lastName, age, gender, scoreDetail } = req.body;\r\n        const student = new Student({ firstName, lastName, age, gender, scoreDetail });\r\n        const result = await student.save();\r\n        if (result) succeed(res, result, 200);\r\n        else failed(res, 'Couldn\\'t create student', 500);\r\n    } catch (error) {\r\n        console.log(error);\r\n        failed(res, error, 400);\r\n    }\r\n};\r\n\r\nexport const getStudentList = async (req, res) => {\r\n    try {\r\n        let { limit = 10, page = 1 } = req.query;\r\n        limit = +limit;\r\n        page = +page;\r\n        const skip = limit * (page - 1);\r\n\r\n        const [students, total] = await Promise.all([\r\n            Student.find({ isActive: true }).skip(skip).limit(limit),\r\n            Student.count({ isActive: true })\r\n        ]);\r\n\r\n        if (students) {\r\n            succeed(res,{message: 'Success','Data': students,options: {limit,skip,total}}, 200);\r\n        }\r\n        else failed(res, 'Not Found', 404);\r\n    } catch (error) {\r\n        console.log(error);\r\n        failed(res, error, 400);\r\n    }\r\n};\r\n"]}