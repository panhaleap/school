{"version":3,"sources":["../../../src/api/score/score.api.js"],"names":["getLimit","limit","getSkip","page","skip","createScore","req","res","student","subject","score","body","scoreModel","Score","result","save","message","Data","error","console","log","getScoretList","isActive","query","filterByActive","condition","scoreModels","total","Promise","all","find","populate","path","select","count","options","getScoreById","id","params","findOne","_id","updateScoreById","data","findOneAndUpdate","$set","deleteScoreById"],"mappings":"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","file":"score.api.js","sourcesContent":["import { failed, succeed } from '../../common/response';\r\nimport { Score } from '../../models/score';\r\n\r\nconst getLimit = limit => {\r\n  limit = +limit;\r\n  return limit > 100 ? 100 : limit;\r\n};\r\n\r\nconst getSkip = (page, limit) => {\r\n  page = +page;\r\n  const skip = limit * (page - 1);\r\n  return skip;\r\n};\r\n\r\nexport const createScore = async (req, res) => {\r\n  try {\r\n    const { student, subject, score } = req.body;\r\n    const scoreModel = new Score({ student, subject, score });\r\n    const result = await scoreModel.save();\r\n    if (result) succeed(res, { message: 'Created Success', Data: result }, 200);\r\n    else failed(res, \"Couldn't create subject\", 500);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const getScoretList = async (req, res) => {\r\n  try {\r\n    let { limit = 10, page = 1, isActive } = req.query;\r\n    limit = getLimit(limit);\r\n    const skip = getSkip(page, limit);\r\n\r\n    const filterByActive = isActive ? { isActive } : { isActive: true };\r\n    const condition = { ...filterByActive };\r\n\r\n    const [scoreModels, total] = await Promise.all([\r\n      Score.find(condition)\r\n        .populate({ path: 'student', select: '-_id firstName lastName' })\r\n        .populate({path: 'subject', select: '-_id name'})\r\n        .skip(skip)\r\n        .limit(limit),\r\n      Score.count(condition)\r\n    ]);\r\n\r\n    if (scoreModels) succeed(res, { message: 'Success', Data: scoreModels, options: { limit, skip, total } }, 200);\r\n    else failed(res, 'Not Found', 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const getScoreById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const scoreModel = await Score.findOne({ _id: id, isActive: true }).populate({ path: 'student', select: '-_id firstName lastName' })\r\n    .populate({path: 'subject', select: '-_id name'});\r\n    if (scoreModel) succeed(res, { message: 'Success', Data: scoreModel }, 200);\r\n    else failed(res, 'Not Found', 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const updateScoreById = async (req, res) => {\r\n  try {\r\n    const data = req.body;\r\n    const { id } = req.params;\r\n    const scoreModel = await Score.findOneAndUpdate({ _id: id, isActive: true }, { $set: data });\r\n    if (scoreModel) succeed(res, { message: 'Updated Sucess', Data: scoreModel }, 200);\r\n    else failed(res, { message: 'Score not found' }, 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const deleteScoreById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const scoreModel = await Score.findOneAndUpdate({ _id: id, isActive: true }, { $set: { isActive: false } });\r\n    if (scoreModel) succeed(res, { message: 'Deleted Sucess' }, 200);\r\n    else failed(res, { message: 'Student not found' }, 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n"]}