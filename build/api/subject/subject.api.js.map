{"version":3,"sources":["../../../src/api/subject/subject.api.js"],"names":["getLimit","limit","getSkip","page","skip","getFilterName","queryName","filterByName","regExpName","RegExp","trim","name","createSubject","req","res","teacher","body","subject","Subject","result","save","message","Data","error","console","log","getSubjectList","isActive","query","filterByActive","condition","subjects","total","Promise","all","find","count","options","getSubjectById","id","params","findOne","_id","updateSubjectById","data","findOneAndUpdate","$set","deleteSubjectById"],"mappings":"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","file":"subject.api.js","sourcesContent":["import { failed, succeed } from '../../common/response';\r\nimport { Subject } from '../../models/subject';\r\n\r\nconst getLimit = limit => {\r\n  limit = +limit;\r\n  return limit > 100 ? 100 : limit;\r\n};\r\n\r\nconst getSkip = (page, limit) => {\r\n  page = +page;\r\n  const skip = limit * (page - 1);\r\n  return skip;\r\n};\r\n\r\nconst getFilterName = queryName => {\r\n  let filterByName;\r\n  if (queryName) {\r\n    const regExpName = new RegExp(`${queryName.trim()}`, 'i');\r\n    filterByName = { name: regExpName };\r\n  } else {\r\n    filterByName = {};\r\n  }\r\n  return filterByName;\r\n};\r\n\r\nexport const createSubject = async (req, res) => {\r\n  try {\r\n    const { name, teacher } = req.body;\r\n    const subject = new Subject({ name, teacher });\r\n    const result = await subject.save();\r\n    if (result) succeed(res, { message: 'Created Success', Data: result }, 200);\r\n    else failed(res, \"Couldn't create subject\", 500);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const getSubjectList = async (req, res) => {\r\n  try {\r\n    let { limit = 10, page = 1, isActive, name } = req.query;\r\n    limit = getLimit(limit);\r\n    const skip = getSkip(page, limit);\r\n\r\n    const filterByActive = isActive ? { isActive } : { isActive: true };\r\n    const filterByName = getFilterName(name);\r\n    console.log(filterByName);\r\n    const condition = { ...filterByActive, ...filterByName };\r\n\r\n    const [subjects, total] = await Promise.all([\r\n      Subject.find(condition)\r\n        .skip(skip)\r\n        .limit(limit),\r\n      Subject.count(condition)\r\n    ]);\r\n\r\n    if (subjects) succeed(res, { message: 'Success', Data: subjects, options: { limit, skip, total } }, 200);\r\n    else failed(res, 'Not Found', 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const getSubjectById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const subject = await Subject.findOne({ _id: id, isActive: true });\r\n    if (subject) succeed(res, { message: 'Success', Data: subject }, 200);\r\n    else failed(res, 'Not Found', 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const updateSubjectById = async (req, res) => {\r\n  try {\r\n    const data = req.body;\r\n    const { id } = req.params;\r\n    const subject = await Subject.findOneAndUpdate({ _id: id, isActive: true }, { $set: data });\r\n    if (subject) succeed(res, { message: 'Updated Sucess', Data: subject }, 200);\r\n    else failed(res, { message: 'Subject not found' }, 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n\r\nexport const deleteSubjectById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const subject = await Subject.findOneAndUpdate({ _id: id, isActive: true }, { $set: { isActive: false } });\r\n    console.log(subject);\r\n    if (subject) succeed(res, { message: 'Deleted Sucess' }, 200);\r\n    else failed(res, { message: 'Student not found' }, 404);\r\n  } catch (error) {\r\n    console.log(error);\r\n    failed(res, error, 400);\r\n  }\r\n};\r\n"]}